# -*- coding: utf-8 -*-
"""MaheenSalman_ML_Stats_Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17x_BCOsYYdzyhrAax5zSeZVb0V-D-99K

Importing car sales csv file
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Read the CSV file into a DataFrame
Carsales = pd.read_csv('Carsales.csv')

"""Identify the variable types in the given data set.

**Categorical Variables:**

Manufacturer
Model
Vehicle_type
Latest_launch

**Numerical Variables:**

Sales_in_thousands (Continuous)
year_resale_value (Continuous)
Price_in_thousands (Continuous)
Engine_size (Continuous)
Horsepower (Continuous)
Wheelbase (Continuous)
Width (Width of the car, likely continuous)
Length (Length of the car, likely continuous)
Curb_weight (Weight of the vehicle without passengers or cargo, likely continuous)
Fuel_capacity (Capacity of the fuel tank, likely continuous)
Fuel_efficiency (Efficiency in fuel consumption, likely continuous)
Power_per_factor (Unknown; possibly a derived or calculated variable, likely continuous)
"""

import pandas as pd

# Assuming 'Carsales' is your DataFrame

# Use describe() to get statistical summaries for numerical columns
numerical_summary = Carsales.describe()

# Identify categorical variables by checking data types or unique values
categorical_columns = []
for column in Carsales.columns:
    if Carsales[column].dtype == 'object':  # Check if the column contains object/string data type
        categorical_columns.append(column)

# Display results
print("Statistical summary for numerical columns:")
print(numerical_summary)

print("\nCategorical columns:")
print(categorical_columns)

import pandas as pd
import matplotlib.pyplot as plt

#read the CSV file into a DataFrame
Carsales = pd.read_csv('Carsales.csv')

#create a bar chart of the number of cars sold by each manufacturer
manufacturer_counts = Carsales['Manufacturer'].value_counts()
plt.figure(figsize=(10, 6))
manufacturer_counts.plot(kind='bar', color='skyblue')

#add a title, x-axis label, and y-axis label to the chart
plt.title('Count of Cars by Manufacturer')
plt.xlabel('Manufacturer')
plt.ylabel('Count')

#rotate the x-axis labels so that they are readable
plt.xticks(rotation=45)

#tighten the layout of the chart
plt.tight_layout()

#show the chart
plt.show()

"""Make a bar graph for manufacturer type"""

import pandas as pd
import matplotlib.pyplot as plt

manufacturer_counts = Carsales['Manufacturer'].value_counts()

plt.figure(figsize=(10, 6))
manufacturer_counts.plot(kind='bar', color='skyblue')

plt.title('Count of Cars by Manufacturer')
plt.xlabel('Manufacturer')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

"""Make a pie chart for showing vehicle type by percentage"""

import pandas as pd
import matplotlib.pyplot as plt


vehicle_type_counts = Carsales ['Vehicle_type'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(vehicle_type_counts, labels=vehicle_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Percentage of Vehicle Types')

plt.axis('equal')  #Equal aspect ratio ensures that pie is drawn as a circle.
plt.tight_layout()

plt.show()

"""Calculate average Price of all cars by using correct measure of central Tendency"""

import pandas as pd

average_price = Carsales['Price_in_thousands'].mean()

print(f"The average price of all cars is: ${average_price:.2f} thousand")

"""Calculate the variance and standard deviation for numerical columns such as
Sales_in_thousands, __year_resale_value, Price_in_thousands, Engine_size, Horsepower
"""

import pandas as pd

# Assuming 'Carsales' is your DataFrame

# Selecting specific numerical columns
numerical_columns = ['Sales_in_thousands', '__year_resale_value', 'Price_in_thousands', 'Engine_size', 'Horsepower']

# Calculating variance for selected columns
variance = Carsales[numerical_columns].var()

# Calculating standard deviation for selected columns
std_deviation = Carsales[numerical_columns].std()

# Displaying results
print("Variance for selected numerical columns:")
print(variance)
print("\nStandard deviation for selected numerical columns:")
print(std_deviation)

"""For the same columns Calculate IQR and identify outliers in these columns"""

import pandas as pd

# Selecting specific numerical columns
numerical_columns = ['Sales_in_thousands', '__year_resale_value', 'Price_in_thousands', 'Engine_size', 'Horsepower']

# Loop through each column to calculate IQR and identify outliers
for column in numerical_columns:
    Q1 = Carsales[column].quantile(0.25)
    Q3 = Carsales[column].quantile(0.75)
    IQR = Q3 - Q1

    # Identifying outliers for the current column
    outliers = Carsales[(Carsales[column] < Q1 - 1.5 * IQR) | (Carsales[column] > Q3 + 1.5 * IQR)]

    # Displaying results for each column
    print(f"Column: {column}")
    print(f"IQR: {IQR}")
    print(f"Identified outliers:")
    print(outliers)
    print("\n")

"""Make Histograms for all Numerical columns and identify the distribution of type by calculating
skewness;
Note : If the skewness is 0, it indicates a perfectly symmetrical distribution.
If the skewness is negative, it means the distribution is skewed to the left (long left tail).
If the skewness is positive, it means the distribution is skewed to the right (long right tail).
"""

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import skew


#Selecting numerical columns
numerical_columns = ['Sales_in_thousands', '__year_resale_value', 'Price_in_thousands', 'Engine_size', 'Horsepower']

#Plot histograms for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(6, 4))
    plt.hist(Carsales[column], bins='auto', color='skyblue')
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.grid(axis='y')
    plt.show()

    #Calculate skewness for the current column
    skewness = skew(Carsales[column])
    print(f"Skewness for {column}: {skewness}")
    if skewness == 0:
        print("The distribution is perfectly symmetrical.")
    elif skewness > 0:
        print("The distribution is skewed to the right (long right tail).")
    else:
        print("The distribution is skewed to the left (long left tail).")
    print("\n")